name: Deploy Node.js App to EC2

on:
  # Trigger on PR merge to main branch
  push:
    branches: [ main ]
  
  # Keep manual trigger as backup option
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# Prevent concurrent deployments
concurrency:
  group: deploy-main
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Log deployment trigger
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "🔄 Auto-deployment triggered by PR merge to main"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
        else
          echo "🚀 Manual deployment triggered"
        fi

    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
        ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'DEPLOY_SCRIPT'
        
        echo "🚀 Starting deployment..."
        
        # Update system packages
        sudo apt update
        
        # Install Node.js if not exists
        if ! command -v node &> /dev/null; then
          echo "📦 Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
        fi
        
        # Install nginx if not exists
        if ! command -v nginx &> /dev/null; then
          echo "📦 Installing Nginx..."
          sudo apt install -y nginx
          sudo systemctl enable nginx
        fi
        
        # Clone or update repository
        if [ -d "${{ secrets.APP_DIR }}" ]; then
          echo "🔄 Updating existing repository..."
          cd ${{ secrets.APP_DIR }}
          git fetch origin
          git reset --hard origin/main
          git clean -fd
        else
          echo "📥 Cloning repository..."
          git clone https://github.com/${{ github.repository }}.git ${{ secrets.APP_DIR }}
          cd ${{ secrets.APP_DIR }}
        fi
        
        # Install dependencies
        echo "📦 Installing dependencies..."
        npm ci --only=production
        
        # Create environment file
        echo "⚙️ Setting up environment..."
        tee ${{ secrets.APP_DIR }}/.env > /dev/null << ENV_FILE
        NODE_ENV=${{ secrets.NODE_ENV }}
        PORT=${{ vars.APP_PORT }}
        ${{ secrets.APP_ENV_VARS }}
        ENV_FILE
        
        # Set proper permissions
        sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} ${{ secrets.APP_DIR }}
        chmod 600 ${{ secrets.APP_DIR }}/.env
        
        DEPLOY_SCRIPT

    - name: Configure systemd service
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
        ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'SERVICE_SCRIPT'
        
        # Check if service already exists
        if sudo systemctl list-unit-files | grep -q "${{ secrets.SERVICE_NAME }}.service"; then
          echo "🔄 Service exists - updating configuration..."
          SERVICE_EXISTS=true
        else
          echo "🆕 Creating new systemd service..."
          SERVICE_EXISTS=false
        fi
        
        # Create/update systemd service file
        sudo tee /etc/systemd/system/${{ secrets.SERVICE_NAME }}.service > /dev/null << 'SERVICE_FILE'
        [Unit]
        Description=Node.js App - ${{ secrets.SERVICE_NAME }}
        After=network.target
        
        [Service]
        Type=simple
        User=${{ secrets.EC2_USER }}
        WorkingDirectory=${{ secrets.APP_DIR }}
        ExecStart=/usr/bin/node ${{ secrets.APP_DIR }}/app.js
        Restart=always
        RestartSec=10
        Environment=NODE_ENV=production
        EnvironmentFile=${{ secrets.APP_DIR }}/.env
        StandardOutput=syslog
        StandardError=syslog
        SyslogIdentifier=${{ secrets.SERVICE_NAME }}
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_FILE
        
        # Reload systemd (always needed when service file changes)
        sudo systemctl daemon-reload
        
        # Enable service (only if new)
        if [ "$SERVICE_EXISTS" = false ]; then
          echo "🔧 Enabling new service..."
          sudo systemctl enable ${{ secrets.SERVICE_NAME }}
        fi
        
        # Stop service if running (for updates)
        sudo systemctl stop ${{ secrets.SERVICE_NAME }} || true
        
        # Start service
        sudo systemctl start ${{ secrets.SERVICE_NAME }}
        
        # Wait for service to start
        sleep 5
        
        echo "✅ Service configuration completed"
        
        SERVICE_SCRIPT

    - name: Configure Nginx reverse proxy
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
        ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'NGINX_SCRIPT'
        
        # Check if nginx config already exists
        if [ -f "/etc/nginx/sites-available/${{ secrets.SERVICE_NAME }}" ]; then
          echo "🔄 Nginx config exists - updating..."
          NGINX_EXISTS=true
        else
          echo "🆕 Creating new Nginx configuration..."
          NGINX_EXISTS=false
        fi
        
        # Clean up any conflicting configs (prevent duplicate server blocks)
        sudo rm -f /etc/nginx/sites-enabled/*
        
        # Create/update nginx configuration
        sudo tee /etc/nginx/sites-available/${{ secrets.SERVICE_NAME }} > /dev/null << 'NGINX_CONFIG'
        server {
            listen 80;
            server_name ${{ secrets.DOMAIN_NAME }} localhost;

            location / {
                proxy_pass http://127.0.0.1:${{ vars.APP_PORT }};
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 86400;
            }
        }
        NGINX_CONFIG
        
        # Enable the site
        sudo ln -sf /etc/nginx/sites-available/${{ secrets.SERVICE_NAME }} /etc/nginx/sites-enabled/
        
        # Test nginx config
        if sudo nginx -t; then
          echo "✅ Nginx config test passed"
          sudo systemctl reload nginx
        else
          echo "❌ Nginx config test failed"
          exit 1
        fi
        
        echo "✅ Nginx configuration completed"
        
        NGINX_SCRIPT

    - name: Install Certbot
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
        ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'CERTBOT_SCRIPT'
        
        # Check if certbot is already installed
        if command -v certbot &> /dev/null; then
          echo "✅ Certbot is already installed"
          certbot --version
        else
          echo "📦 Installing Certbot..."
          sudo apt update
          sudo apt install -y certbot python3-certbot-nginx
          echo "✅ Certbot installed successfully"
          certbot --version
        fi
        
        CERTBOT_SCRIPT

    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
        ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'VERIFY_SCRIPT'
        
        echo "✅ Deployment verification..."
        
        # Check service status
        echo "--- Service Status ---"
        if sudo systemctl is-active ${{ secrets.SERVICE_NAME }} --quiet; then
          echo "✅ Service is running"
        else
          echo "❌ Service is not running"
          sudo systemctl status ${{ secrets.SERVICE_NAME }} --no-pager
        fi
        
        # Check nginx status
        echo "--- Nginx Status ---"
        if sudo systemctl is-active nginx --quiet; then
          echo "✅ Nginx is running"
        else
          echo "❌ Nginx is not running"
          sudo systemctl status nginx --no-pager
        fi
        
        # Check if app is responding locally
        echo "--- App Health Check ---"
        if curl -f http://localhost:${{ vars.APP_PORT }} > /dev/null 2>&1; then
          echo "✅ App is responding on port ${{ vars.APP_PORT }}"
        else
          echo "❌ App is not responding on port ${{ vars.APP_PORT }}"
        fi
        
        # Check if nginx proxy is working
        echo "--- Nginx Proxy Check ---"
        if curl -f http://localhost:80 > /dev/null 2>&1; then
          echo "✅ Nginx proxy is working"
        else
          echo "❌ Nginx proxy is not working"
        fi
        
        # Show recent logs if there are issues
        echo "--- Recent Service Logs ---"
        sudo journalctl -u ${{ secrets.SERVICE_NAME }} -n 5 --no-pager
        
        VERIFY_SCRIPT

    - name: Final health check
      run: |
        echo "🏥 Final health check..."
        sleep 10
        
        # Check HTTP (since SSL is manual)
        if curl -f -s --max-time 10 http://${{ secrets.DOMAIN_NAME }} > /dev/null; then
          echo "✅ HTTP health check passed"
          echo "🌐 App is accessible at: http://${{ secrets.DOMAIN_NAME }}"
        else
          echo "⚠️ HTTP health check failed - this might be due to DNS not being configured yet"
          echo "📍 Your app is running locally and can be accessed once DNS is set up"
        fi

    - name: Deployment completed - Manual SSL setup required
      run: |
        echo ""
        echo "🎉 Deployment completed successfully!"
        echo "========================================="
        echo ""
        echo "✅ Your application is deployed and running"
        echo "✅ Nginx reverse proxy is configured" 
        echo "✅ Certbot is installed and ready"
        echo ""
        echo "⚠️  NEXT STEPS: Manual SSL Certificate Setup"
        echo "=============================================="
        echo ""
        echo "To enable HTTPS, complete these steps:"
        echo ""
        echo "1. SSH into your server:"
        echo "   ssh -i your-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}"
        echo ""
        echo "2. Get SSL certificate:"
        echo "   sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }}"
        echo ""
        echo "3. Enable auto-renewal:"
        echo "   sudo systemctl enable certbot.timer"
        echo ""
        echo "4. Test auto-renewal (optional):"
        echo "   sudo certbot renew --dry-run"
        echo ""
        echo "🔧 TROUBLESHOOTING:"
        echo "• Ensure your domain DNS points to this EC2 instance"
        echo "• Check security group allows ports 80 and 443"
        echo "• If issues, check logs: sudo journalctl -u ${{ secrets.SERVICE_NAME }}"
        echo ""
        echo "🌐 Current access:"
        echo "• Local: http://localhost:${{ vars.APP_PORT }}"
        echo "• Nginx: http://${{ secrets.DOMAIN_NAME }}"
        echo "• After SSL: https://${{ secrets.DOMAIN_NAME }}"

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key